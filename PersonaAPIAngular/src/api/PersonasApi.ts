/**
 * Prueba Concepto API RESTful
 * Prueba de concepto de un API RESTful.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jotasumin@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PersonasApi {

    // TODO: Automatizar la modificación de este valor en funcion del entorno de desarrollo
    // Ahora mismo es necesario modificarlo a mano
    protected basePath = 'http://http://192.168.56.101:85/v1';
    
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Añade una nueva persona
     * @summary Añade una nueva persona
     * @param addPersonaBody Datos de la persona
     */
    public addPersona(addPersonaBody: models.AddPersonaBody, extraHttpRequestParams?: any): Observable<models.InlineResponse200> {
        return this.addPersonaWithHttpInfo(addPersonaBody, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Elimina una persona
     * @summary Elimina una persona
     * @param idPersona ID de la persona
     */
    public deletePersona(idPersona: string, extraHttpRequestParams?: any): Observable<models.InlineResponse200> {
        return this.deletePersonaWithHttpInfo(idPersona, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Devuelve todas las personas
     * @summary Devuelve todas las personas
     */
    public findAllPersonas(extraHttpRequestParams?: any): Observable<Array<models.InlineResponse200>> {
        return this.findAllPersonasWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Devuelve una persona por su ID
     * @summary Devuelve una persona por su ID
     * @param idPersona ID de la persona
     */
    public getPersonaPorId(idPersona: string, extraHttpRequestParams?: any): Observable<models.InlineResponse200> {
        return this.getPersonaPorIdWithHttpInfo(idPersona, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Modifica una persona ya existente
     * @summary Modifica una persona ya existente
     * @param updatePersonaBody Datos de la persona
     */
    public updatePersona(updatePersonaBody: models.UpdatePersonaBody, extraHttpRequestParams?: any): Observable<models.InlineResponse200> {
        return this.updatePersonaWithHttpInfo(updatePersonaBody, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Añade una nueva persona
     * Añade una nueva persona
     * @param addPersonaBody Datos de la persona
     */
    public addPersonaWithHttpInfo(addPersonaBody: models.AddPersonaBody, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/persona';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'addPersonaBody' is not null or undefined
        if (addPersonaBody === null || addPersonaBody === undefined) {
            throw new Error('Required parameter addPersonaBody was null or undefined when calling addPersona.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'application/xml'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/xml',
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: addPersonaBody == null ? '' : JSON.stringify(addPersonaBody), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Elimina una persona
     * Elimina una persona
     * @param idPersona ID de la persona
     */
    public deletePersonaWithHttpInfo(idPersona: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/persona/${idPersona}'
                    .replace('${' + 'idPersona' + '}', String(idPersona));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'idPersona' is not null or undefined
        if (idPersona === null || idPersona === undefined) {
            throw new Error('Required parameter idPersona was null or undefined when calling deletePersona.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/xml',
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Devuelve todas las personas
     * Devuelve todas las personas
     */
    public findAllPersonasWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/persona/findAll';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/xml',
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Devuelve una persona por su ID
     * Devuelve una persona por su ID
     * @param idPersona ID de la persona
     */
    public getPersonaPorIdWithHttpInfo(idPersona: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/persona/${idPersona}'
                    .replace('${' + 'idPersona' + '}', String(idPersona));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'idPersona' is not null or undefined
        if (idPersona === null || idPersona === undefined) {
            throw new Error('Required parameter idPersona was null or undefined when calling getPersonaPorId.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/xml',
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Modifica una persona ya existente
     * Modifica una persona ya existente
     * @param updatePersonaBody Datos de la persona
     */
    public updatePersonaWithHttpInfo(updatePersonaBody: models.UpdatePersonaBody, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/persona';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'updatePersonaBody' is not null or undefined
        if (updatePersonaBody === null || updatePersonaBody === undefined) {
            throw new Error('Required parameter updatePersonaBody was null or undefined when calling updatePersona.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'application/xml'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/xml',
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: updatePersonaBody == null ? '' : JSON.stringify(updatePersonaBody), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
